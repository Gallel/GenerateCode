<time value="0:01:37.976230"/>
<test id="1" result="OK" case="Create empty linked list and check if it's empty" expected="true" result="(new LinkedList<Integer>()).isEmpty()" reason=""/>
<test id="2" result="OK" case="Add item to the beginning of empty linked list and check if it's not empty" expected="false" result="(new LinkedList<Integer>()).insertBeginning(5); !(new LinkedList<Integer>()).isEmpty()" reason=""/>
<test id="3" result="OK" case="Add item to the end of empty linked list and check if it's not empty" expected="false" result="(new LinkedList<Integer>()).insertEnd(5); !(new LinkedList<Integer>()).isEmpty()" reason=""/>
<test id="4" result="OK" case="Add item after a position and retrieve items" expected="[5, 10]" result="{ LinkedList<Integer> list = new LinkedList<Integer>(); Position<Integer> pos = list.insertBeginning(5); list.insertAfter(pos, 10); Iterator<Integer> it = list.values(); List<Integer> items = new ArrayList<Integer>(); while(it.hasNext()) { items.add(it.next()); } items; }" reason=""/>
<test id="5" result="OK" case="Swap two items and retrieve items" expected="[5, 15, 10]" result="{ LinkedList<Integer> list = new LinkedList<Integer>(); Position<Integer> pos1 = list.insertBeginning(5); Position<Integer> pos2 = list.insertAfter(pos1, 10); list.insertAfter(pos1, 15); list.swap(pos1, pos2); Iterator<Integer> it = list.values(); List<Integer> items = new ArrayList<Integer>(); while(it.hasNext()) { items.add(it.next()); } items; }" reason=""/>
<test id="6" result="FAILED" case="Delete the first item in a list that has only one item and check if it's empty" expected="true" result="{ LinkedList<Integer> list = new LinkedList<Integer>(); Position<Integer> pos = list.insertBeginning(5); list.deleteFirst(); list.isEmpty(); }" reason="The test failed because the obtained result was false instead of true. This happened because the deleteFirst method did not remove the item from the list."/>
