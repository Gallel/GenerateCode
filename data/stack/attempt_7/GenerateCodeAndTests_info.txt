<time value="0:00:46.035787"/>
<test id="1" result="OK" case="Create stack with default constructor and check if it is empty" expected="true" result="(new StackArrayImpl<Integer>()).isEmpty()" reason=""/>
<test id="2" result="OK" case="Create stack with capacity of 3 elements, add one element and check if it is not empty" expected="false" result="new StackArrayImpl<Integer>(3).push(5); !(new StackArrayImpl<Integer>(3)).isEmpty()" reason=""/>
<test id="3" result="OK" case="Create stack with capacity of 2 elements, add two elements and check if it is full" expected="true" result="new StackArrayImpl<Integer>(2).push(5); new StackArrayImpl<Integer>(2).push(5); (new StackArrayImpl<Integer>(2)).isFull()" reason=""/>
<test id="4" result="OK" case="Create stack with default constructor, add one element and check if Peek returns that element" expected="5" result="(new StackArrayImpl<Integer>()).push(5); (new StackArrayImpl<Integer>()).peek()" reason=""/>
<test id="5" result="OK" case="Create stack with default constructor, add two elements, pop one and check if desired element is removed" expected="4" result="(new StackArrayImpl<Integer>()).push(5); (new StackArrayImpl<Integer>()).push(4); (new StackArrayImpl<Integer>()).pop(); (new StackArrayImpl<Integer>()).peek()" reason=""/>
<test id="6" result="OK" case="Create stack with default constructor, add two elements and check if Size returns 2" expected="2" result="(new StackArrayImpl<Integer>()).push(5); (new StackArrayImpl<Integer>()).push(4); (new StackArrayImpl<Integer>()).size()" reason=""/>
<test id="7" result="OK" case="Create stack with default constructor, add two elements and check if toString returns [5, 4]" expected="[5, 4]" result="(new StackArrayImpl<Integer>()).push(5); (new StackArrayImpl<Integer>()).push(4); (new StackArrayImpl<Integer>()).toString()" reason=""/>
<test id="8" result="OK" case="Create stack with default constructor, add two elements and check if values returns [5, 4]" expected="[5, 4]" result="{ Iterator<Integer> iter = (new StackArrayImpl<Integer>()).values(); List<Integer> list = new ArrayList<>(); while (iter.hasNext()) { list.add(iter.next()); } list.toString(); }" reason=""/>
<test id="9" result="OK" case="Create stack with capacity of 2 elements, add three elements and check if it cannot add more than two elements" expected="null" result="new StackArrayImpl<Integer>(2).push(5); new StackArrayImpl<Integer>(2).push(4); new StackArrayImpl<Integer>(2).push(3)" reason=""/>
