A partir de las siguientes estructuras en algorítmico:

const
MAX_PROJECTS: integer = 100;
MAX_PEOPLE: integer = 100;
end const
type
tProject = record
code: string;
ngoCode : string;
budget: float;
end record
tProjectData = record
elems: vector [MAX_PROJECTS] of tProject;
count: integer;
end record
tBenefactor = record
personDocument: string;
amount: float;
end record
tBenefactorData = record
elems: vector [MAX_PEOPLE] of tBenefactor;
count: integer;
end record
tNGO = record
code: string;
name: string;
projects: tProjectData;
benefactors: tBenefactorData;
end record
tDonation = record
date: tDate;
personDocument: string;
ngo: string;
projectCode: string;
amount: float;
end record
tDonationData = record
elems: vector [MAX_DONATIONS] of tDonation;
count: integer;
end record
end type

Genera una función que sea:
function calculateBenefactorsNGO(donations: tDonationData, ngo: tNGO)
: tBenefactorData

Y cumpla las siguientes condiciones:
● La lista de donaciones puede contener donaciones a distintas ONGs.
● Para cada benefactor es necesario calcular cuánto dinero ha donado a la
ONG.
● El monto aportado en cada donación será siempre positivo y superior a cero.
Es una precondición del sistema que nos asegura algo obvio, que esperamos
recibir dinero y no regalarlo.
● En la lista de beneficiarios devuelta la misma persona no puede aparecer dos
veces. Además la lista estará ordenada alfabéticamente por el documento de
la persona.
● Para resolver el problema utiliza la definición de tDonation y de
tDonationData de la solución de la PEC1, que te recordamos a continuación.