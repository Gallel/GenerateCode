<time value="0:03:53.873380"/>
<test id="1" result="OK" case="Test isEmpty" expected="true" result="(new LinkedList<>()).isEmpty()"/>
<test id="2" result="OK" case="Test insertBeginning and deleteFirst" expected="4" result="{
LinkedList<Integer> list = new LinkedList<>();
list.insertBeginning(4);
list.insertBeginning(3);
list.insertBeginning(2);
list.insertBeginning(1);
list.deleteFirst();
return list.size();
}"/>
<test id="3" result="OK" case="Test insertBefore and insertAfter" expected="[{1}, {2}, {3}, {4}, {5}, {6}]" result="{
LinkedList<Integer> list = new LinkedList<>();
Position<Integer> pos1 = list.insertBeginning(6);
Position<Integer> pos2 = list.insertBefore(pos1, 5);
Position<Integer> pos3 = list.insertBefore(pos2, 4);
Position<Integer> pos4 = list.insertAfter(pos1, 1);
Position<Integer> pos5 = list.insertAfter(pos4, 2);
list.insertAfter(pos5, 3);
ArrayList<String> values = new ArrayList<>();
for (Integer value : list.values()) {
values.add("{" + value + "}");
}
return values.toString();
}"/>
<test id="4" result="OK" case="Test swap" expected="[{5}, {2}, {3}, {4}, {1}, {6}]" result="{
LinkedList<Integer> list = new LinkedList<>();
list.insertBeginning(6);
Position<Integer> pos1 = list.insertBeginning(1);
Position<Integer> pos2 = list.insertAfter(pos1, 2);
Position<Integer> pos3 = list.insertBefore(pos2, 3);
Position<Integer> pos4 = list.insertAfter(pos3, 4);
Position<Integer> pos5 = list.swap(pos1, pos2);
ArrayList<String> values = new ArrayList<>();
for (Integer value : list.values()) {
values.add("{" + value + "}");
}
return values.toString();
}"/>
<test id="5" result="OK" case="Test update" expected="[{1}, {10}, {3}]" result="{
LinkedList<Integer> list = new LinkedList<>();
Position<Integer> pos1 = list.insertBeginning(3);
list.insertBefore(pos1, 1);
list.insertAfter(pos1, 5);
list.update(pos1, 10);
ArrayList<String> values = new ArrayList<>();
for (Integer value : list.values()) {
values.add("{" + value + "}");
}
return values.toString();
}"/>
