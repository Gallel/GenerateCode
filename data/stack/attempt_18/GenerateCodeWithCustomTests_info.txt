<time value="0:00:56.175067"/>
<test id="1" result="OK" case="Test if the container is empty" expected="true" result="(new StackArrayImpl<Integer>()).isEmpty()" reason=""/>
<test id="2" result="OK" case="Test if the size of the container is 0" expected="0" result="(new StackArrayImpl<Integer>()).size()" reason=""/>
<test id="3" result="OK" case="Test if the last item is null when the container is empty" expected="null" result="(new StackArrayImpl<Integer>()).peek()" reason=""/>
<test id="4" result="OK" case="Test if we can add an item to the container" expected="1" result="(new StackArrayImpl<Integer>()).push(10); (new StackArrayImpl<Integer>()).size()" reason=""/>
<test id="5" result="OK" case="Test if we can add and remove an item to and from the container, respectively" expected="0" result="(new StackArrayImpl<Integer>()).push(10); (new StackArrayImpl<Integer>()).pop(); (new StackArrayImpl<Integer>()).size()" reason=""/>
<test id="6" result="OK" case="Test if peek() returns the last item of the stack, but do not remove it from the container" expected="9" result="{Stack<Integer> stack = new StackArrayImpl<Integer>(); stack.push(1); stack.push(9); int var = stack.peek(); stack.push(3); var;}" reason=""/>
<test id="7" result="OK" case="Test if pop() returns the last item of the stack and removes it from the container" expected="9" result="{Stack<Integer> stack = new StackArrayImpl<Integer>(); stack.push(1); stack.push(9); int var = stack.pop(); stack.push(3); var;}" reason=""/>
<test id="8" result="OK" case="Test if push() keeps the order of the stack" expected="[9, 3, 1]" result="{Stack<Integer> stack = new StackArrayImpl<Integer>(); stack.push(1); stack.push(9); stack.push(3); stack.toString();}" reason=""/>
<test id="9" result="OK" case="Test if we can add the max number of elements to the container" expected="true" result="{Stack<Integer> stack = new StackArrayImpl<Integer>(2); stack.push(1); stack.push(2); stack.isFull();}" reason=""/>
<test id="10" result="OK" case="Test if we can add the max number of elements to the container and throws the expected exception when we try to add a new one" expected="true" result="{Stack<Integer> stack = new StackArrayImpl<Integer>(2); stack.push(1); stack.push(2); assertThrows(FullContainerException.class, () -> stack.push(3)); true;}" reason=""/>
<test id="11" result="OK" case="Test if toString() returns the right string, but it is not empty after popping the last element" expected="[3, 1]" result="{Stack<Integer> stack = new StackArrayImpl<Integer>(3); stack.push(1); stack.push(2); stack.push(3); String s1 = stack.toString(); stack.pop(); stack.pop(); String s2 = stack.toString() ; !(s1.equals(s2) && stack.isEmpty());}" reason=""/>
<test id="12" result="OK" case="Test if the iterator returns the elements in the right order" expected="[4,3,2,1]" result="{Stack<Integer> stack = new StackArrayImpl<Integer>(4); stack.push(1); stack.push(2); stack.push(3); stack.push(4); List<Integer> l = new ArrayList<>(); for (int i : stack) {l.add(i); } l;}" reason=""/>
<test id="13" result="OK" case="Test if the iterator is empty when the container is empty" expected="[]" result="{Stack<Integer> stack = new StackArrayImpl<Integer>(4); Iterator<Integer> it = stack.values(); List<Integer> l = new ArrayList<>(); while (it.hasNext()) {l.add(it.next()); } l;}" reason=""/>
